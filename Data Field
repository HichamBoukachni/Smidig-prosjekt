import sys
import os
import subprocess
from PyQt5.QtWidgets import (QApplication, QMainWindow, QVBoxLayout, QHBoxLayout, QPushButton,
                             QProgressBar, QComboBox, QWidget, QLabel, QTreeWidget, QTreeWidgetItem, QLineEdit,
                             QFileDialog, QCheckBox, QTextEdit, QSizePolicy)
from PyQt5.QtGui import QIcon, QPixmap, QFont
from PyQt5.QtCore import Qt, QSize, QThread, pyqtSignal, QProcess


class Worker(QThread):
    result_ready = pyqtSignal(str)
    progress = pyqtSignal(int)

    def __init__(self, command):
        super().__init__()
        self.command = command

    def run(self):
        process = QProcess()
        process.setProcessChannelMode(QProcess.MergedChannels)
        process.start(' '.join(self.command))

        total_lines = 0
        output = ""
        while process.waitForReadyRead():
            output += process.readAll().data().decode()
            total_lines += 1
            progress_percentage = min(100, int((total_lines / 100.0) * 100))
            self.progress.emit(progress_percentage)

        process.waitForFinished()
        self.result_ready.emit(output)


class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()

        self.translations = {
            'current_language': 'English',
            'data_field': {'English': 'Data Field', 'Norwegian': 'Datafelt'},
            'result_window_title': {'English': 'Result Window', 'Norwegian': 'Resultatvindu'},
            'results_for_plugin': {'English': 'Results for plugin', 'Norwegian': 'Resultater for plugin'},
            'close_button': {'English': 'Close', 'Norwegian': 'Lukk'},
            'view_result_button': {'English': 'View Result', 'Norwegian': 'Vis Resultat'},
            'executing_plugin': {'English': 'Executing plugin', 'Norwegian': 'Utfører plugin'},
            'info': {'English': 'INFO', 'Norwegian': 'INFO'},
            'initializing': {'English': 'Initializing', 'Norwegian': 'Initialiserer'},
            'listing_processes': {'English': 'Listing processes', 'Norwegian': 'Lister prosesser'},
            'scanning_files': {'English': 'Scanning files', 'Norwegian': 'Skanner filer'},
            'found_file': {'English': 'Found file', 'Norwegian': 'Funnet fil'},
            'scanning_network': {'English': 'Scanning network', 'Norwegian': 'Skanner nettverk'},
            'ip_address': {'English': 'IP Address', 'Norwegian': 'IP-adresse'},
            'port': {'English': 'Port', 'Norwegian': 'Port'},
            'running': {'English': 'Running', 'Norwegian': 'Kjører'},
            'no_specific_output': {'English': 'No specific output for plugin',
                                   'Norwegian': 'Ingen spesifikk output for plugin'},
            'plugin_execution_completed': {'English': 'Plugin execution completed',
                                           'Norwegian': 'Pluginutførelse fullført'},
            'pid': {'English': 'PID', 'Norwegian': 'PID'},
            'name': {'English': 'Name', 'Norwegian': 'Navn'},
            'favorites': {'English': 'Favorites', 'Norwegian': 'Favoritter'},
            'processes_and_threads': {'English': 'Processes and Threads', 'Norwegian': 'Prosesser og Tråder'},
            'file_system': {'English': 'File system', 'Norwegian': 'Filsystem'},
            'network': {'English': 'Network', 'Norwegian': 'Nettverk'},
            'registry': {'English': 'Registry', 'Norwegian': 'Register'},
            'memory_and_handles': {'English': 'Memory and Handles', 'Norwegian': 'Minne og Håndtak'},
            'system_information': {'English': 'System Information', 'Norwegian': 'Systeminformasjon'},
            'search': {'English': 'Search', 'Norwegian': 'Søk'},
            'analyze_button': {'English': 'Analyze', 'Norwegian': 'Analyser'},
            'all_plugins': {'English': 'All Plugins', 'Norwegian': 'Alle Plugins'},
        }

        self.setWindowTitle(self.translations['data_field'][self.translations['current_language']])
        self.setGeometry(100, 100, 1200, 800)

        self.central_widget = QWidget()
        self.setCentralWidget(self.central_widget)

        self.main_layout = QHBoxLayout(self.central_widget)

        # Left sidebar layout
        self.sidebar_layout = QVBoxLayout()
        self.sidebar_layout.setAlignment(Qt.AlignTop)
        self.main_layout.addLayout(self.sidebar_layout, 1)

        # Search bar
        self.search_layout = QHBoxLayout()
        self.search_icon = QLabel(self)
        search_pixmap = QPixmap("images/_search.png")
        scaled_pixmap = search_pixmap.scaled(14, 14)
        self.search_icon.setPixmap(scaled_pixmap)
        self.search_layout.addWidget(self.search_icon)
        self.search_bar = QLineEdit(self)
        self.search_bar.setPlaceholderText(self.translations['search'][self.translations['current_language']])
        self.search_bar.setObjectName("search_bar")

        # Set the font size for the search bar
        font = QFont()
        font.setPointSize(9)  # Adjust the font size as needed
        self.search_bar.setFont(font)

        self.search_bar.textChanged.connect(self.filter_plugins)
        self.search_layout.addWidget(self.search_bar)
        self.sidebar_layout.addLayout(self.search_layout)

        # Combobox for All Plugins and Favorites
        self.favorites_combobox = QComboBox(self)
        self.favorites_combobox.addItem(self.translations['all_plugins'][self.translations['current_language']])
        self.favorites_combobox.addItem(self.translations['favorites'][self.translations['current_language']])

        # Set the font size for the combobox
        font = QFont()
        font.setPointSize(9)  # Adjust the font size as needed
        self.favorites_combobox.setFont(font)

        # Set the size policy and minimum height
        self.favorites_combobox.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Fixed)
        self.favorites_combobox.setMinimumHeight(30)  # Adjust the height as needed

        self.favorites_combobox.currentIndexChanged.connect(self.change_plugin_list)
        self.sidebar_layout.addWidget(self.favorites_combobox)

        # Plugins list for All Plugins
        self.plugins_list = QTreeWidget(self)
        self.plugins_list.setHeaderHidden(True)
        self.sidebar_layout.addWidget(self.plugins_list)

        self.add_plugins()

        # Plugins list for Favorites
        self.favorites_list = QTreeWidget(self)
        self.favorites_list.setHeaderHidden(True)
        self.favorites_list.hide()
        self.sidebar_layout.addWidget(self.favorites_list)

        # Track which plugins are in favorites
        self.favorites = set()

        # Placeholder Image/Icon Button
        self.upload_button = QPushButton(self)
        self.upload_button.setIconSize(QSize(185, 185))  # Making the icon three times larger
        self.upload_button.setFlat(True)
        self.upload_button.clicked.connect(self.open_file_dialog)
        self.upload_button.setObjectName("upload_button")

        self.upload_button.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Fixed)
        self.upload_button.setMinimumHeight(182)
        self.sidebar_layout.addWidget(self.upload_button, alignment=Qt.AlignBottom)
        self.setLayout(self.sidebar_layout)

        # Main content area
        self.content_layout = QVBoxLayout()
        self.main_layout.addLayout(self.content_layout, 4)

        # Language selection
        self.language_combobox = QComboBox(self)
        self.language_combobox.addItem("English")
        self.language_combobox.addItem("Norwegian")

        # Set the font size for the combobox
        font = QFont()
        font.setPointSize(9)  # Adjust the font size as needed
        self.language_combobox.setFont(font)

        # Set the size policy and minimum height
        self.language_combobox.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Fixed)
        self.language_combobox.setMinimumHeight(30)  # Adjust the height as needed

        self.language_combobox.currentIndexChanged.connect(self.change_language)
        self.content_layout.addWidget(self.language_combobox)

        # Progress Bar
        self.progress_bar_layout = QHBoxLayout()
        self.progress_bar = QProgressBar(self)
        self.progress_bar.setValue(0)  # Reset progress
        self.progress_bar_layout.addWidget(self.progress_bar)

        # Control buttons next to progress bar
        self.view_result_button = QPushButton(
            self.translations['view_result_button'][self.translations['current_language']], self)
        self.view_result_button.setObjectName("view_result_button")

        # Set the font size for the button
        font = QFont()
        font.setPointSize(9)  # Adjust the font size as needed
        self.view_result_button.setFont(font)

        # Set the size policy and fixed size
        self.view_result_button.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Fixed)
        self.view_result_button.setFixedHeight(40)  # Adjust the height as needed
        self.view_result_button.setFixedWidth(150)  # Adjust the width as needed

        self.progress_bar_layout.addWidget(self.view_result_button)
        # Connect the button click to the function
        self.view_result_button.clicked.connect(self.open_report_file)

        self.content_layout.addLayout(self.progress_bar_layout)

        # Text area for output
        self.text_area = QTextEdit(self)
        self.text_area.setReadOnly(True)
        self.content_layout.addWidget(self.text_area)

        # Analyze button
        self.analyze_button = QPushButton(self.translations['analyze_button'][self.translations['current_language']], self)
        self.analyze_button.setObjectName("analyze_button")

        # Set the font size for the button
        font = QFont()
        font.setPointSize(9)  # Adjust the font size as needed
        self.analyze_button.setFont(font)

        # Set the size policy and fixed size
        self.analyze_button.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Fixed)
        self.analyze_button.setFixedHeight(40)  # Adjust the height as needed

        self.analyze_button.clicked.connect(self.execute_analysis)
        self.content_layout.addWidget(self.analyze_button)

    # Function to add plugins to the tree view
    def add_plugins(self):
        categories = {
            'Processes and Threads': ['Process List', 'Thread List'],
            'File system': ['File Search', 'Deleted File Recovery'],
            'Network': ['Network Connections', 'Open Ports'],
            'Registry': ['Registry Search', 'Registry Dump'],
            'Memory and Handles': ['Memory Dump', 'Handle List'],
            'System Information': ['System Info', 'Installed Applications'],
        }

        self.plugin_items = {}
        self.parent_items = []

        for category, plugins in categories.items():
            parent_item = QTreeWidgetItem(self.plugins_list)
            parent_item.setText(0, self.translations[category.lower().replace(' ', '_')][self.translations['current_language']])
            self.parent_items.append(parent_item)

            for plugin in plugins:
                child_item = QTreeWidgetItem(parent_item)
                child_item.setText(0, plugin)
                checkbox = QCheckBox(plugin)
                self.plugins_list.setItemWidget(child_item, 0, checkbox)
                self.plugin_items[plugin] = {'category': category, 'checkbox': checkbox}

    # Function to filter plugins based on search bar input
    def filter_plugins(self, text):
        text = text.lower()
        for plugin, item in self.plugin_items.items():
            parent_item = item['checkbox'].parent()
            if text in plugin.lower():
                item['checkbox'].setParent(None)
                self.plugins_list.setItemWidget(parent_item, 0, item['checkbox'])
            else:
                item['checkbox'].setParent(None)

    # Function to switch between all plugins and favorites
    def change_plugin_list(self, index):
        if index == 0:
            self.plugins_list.show()
            self.favorites_list.hide()
        else:
            self.plugins_list.hide()
            self.favorites_list.show()

    # Function to open a file dialog to select a file
    def open_file_dialog(self):
        options = QFileDialog.Options()
        file_name, _ = QFileDialog.getOpenFileName(self, "QFileDialog.getOpenFileName()", "",
                                                   "All Files (*);;Python Files (*.py)", options=options)
        if file_name:
            print(file_name)

    # Function to open the report file
    def open_report_file(self):
        report_path = os.path.expanduser('~/report.txt')
        if os.path.exists(report_path):
            with open(report_path, 'r') as file:
                content = file.read()
                self.text_area.setPlainText(content)
        else:
            self.text_area.setPlainText('Report file not found.')

    # Function to execute the analysis
    def execute_analysis(self):
        selected_plugins = [plugin for plugin, item in self.plugin_items.items() if item['checkbox'].isChecked()]
        if selected_plugins:
            self.progress_bar.setValue(0)
            command = ['python', 'analyze.py'] + selected_plugins
            self.worker = Worker(command)
            self.worker.progress.connect(self.update_progress)
            self.worker.result_ready.connect(self.show_results)
            self.worker.start()

    # Function to update the progress bar
    def update_progress(self, value):
        self.progress_bar.setValue(value)

    # Function to display the results
    def show_results(self, result):
        self.text_area.setPlainText(result)

    # Function to change the language
    def change_language(self):
        language = self.language_combobox.currentText()
        self.translations['current_language'] = language
        self.update_ui_language()

    # Function to update the UI language
    def update_ui_language(self):
        self.setWindowTitle(self.translations['data_field'][self.translations['current_language']])
        self.search_bar.setPlaceholderText(self.translations['search'][self.translations['current_language']])
        self.favorites_combobox.setItemText(0, self.translations['all_plugins'][self.translations['current_language']])
        self.favorites_combobox.setItemText(1, self.translations['favorites'][self.translations['current_language']])
        self.analyze_button.setText(self.translations['analyze_button'][self.translations['current_language']])
        self.view_result_button.setText(self.translations['view_result_button'][self.translations['current_language']])
        
        for parent_item in self.parent_items:
            category = parent_item.text(0)
            for key, value in self.translations.items():
                if value[self.translations['current_language']] == category:
                    parent_item.setText(0, self.translations[key][self.translations['current_language']])
                    break

    def change_language_ui_elements(self, language):
        self.translations['current_language'] = language
        self.setWindowTitle(self.translations['data_field'][language])
        self.search_bar.setPlaceholderText(self.translations['search'][language])
        self.favorites_combobox.setItemText(0, self.translations['all_plugins'][language])
        self.favorites_combobox.setItemText(1, self.translations['favorites'][language])
        self.analyze_button.setText(self.translations['analyze_button'][language])
        self.view_result_button.setText(self.translations['view_result_button'][language])
        for key in self.plugin_items:
            self.plugin_items[key]['checkbox'].setText(key)

    def change_language_event(self):
        selected_language = self.language_combobox.currentText()
        self.change_language_ui_elements(selected_language)

def main():
    app = QApplication(sys.argv)
    window = MainWindow()
    window.show()
    sys.exit(app.exec_())

